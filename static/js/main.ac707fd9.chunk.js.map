{"version":3,"sources":["header2.png","components/Choice.js","components/ChoiceEvent.js","components/FinalVote.js","components/Card.js","components/Winning.js","components/Save.js","components/GameController.js","GameContainer.js","Data.js","App.js","index.js"],"names":["module","exports","Choice","id","otherGameID","name","down","handleClick","style","className","onClick","ChoiceEvent","handleClose","show","gameOne","children","gameOneID","gameTwoID","handleClickChoice","showHideClassName","FinalVote","gameTwo","Card","props","WinScreen","SaveScreen","choiceCards","saveLeft","map","game","GameController","state","refresh","lastGameSaved","lastGameKilled","lastGameKilledCard","lastGameKilledSaved","shuffle","vote","winShow","saveShow","winner","upCards","downCards","list","playerOrder","playerNum","parseInt","window","$playerNum","playerIndex","secondPlayerIndex","showChoiceEvent","gameName","gameID","setState","hideChoiceEvent","showFinalVote","gameNameTwo","gameIDTwo","hideFinalVote","showSaveChoice","hideSaveChoice","constructDeck","items","$itemList","split","index","length","temp","push","gameCards","key","constructPlayers","nextPlayerTurn","changePlayerTurn","toString","shuffleNewDeck","i","j","Math","floor","random","half","ceil","splice","removeGames","gameSaved","findIndex","p","gameKilled","changeKilledText","changeSavedText","handleNewShuffle","saveLastKill","console","log","changeRound","finalVote","round","reverse","useSave","showWinningCard","winID","this","Save","React","Component","GameContainer","useState","lastCardKilled","setLastCardKilled","lastCardSaved","setLastCardSaved","setRound","playerTurn","setPlayerTurn","player","Data","placeholder","type","step","min","max","to","document","getElementById","value","App","src","header","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.ac707fd9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header2.fd32260c.png\";","import React from \"react\";\r\n\r\nconst Choice = ({ id, otherGameID, name, down, handleClick }) => {\r\n\r\n  return (\r\n    <div style={{\"display\":\"flex\"}}>\r\n        <button className=\"card\" onClick={() => handleClick(id, otherGameID, down)} style={{\"margin-left\":\"auto\", \"margin-right\": \"auto\"}}>\r\n            <h1>{name}</h1>\r\n        </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Choice;\r\n","import React from \"react\";\r\n\r\nimport Choice from \"./Choice\"\r\n\r\nconst ChoiceEvent = ({ handleClose, show, children, gameOne, gameOneID, gameTwoID, handleClickChoice }) => {\r\n  const showHideClassName = show ? \"choiceCard display-block\" : \"choiceCard display-none\";\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n      <section className='choiceCard-main'>\r\n        <h2 style={{\"font-family\": \"Arial\", \"width\":\"100%\", \"text-align\": \"center\"}}>Which game would you like to save</h2>\r\n        <div className=\"choiceGrid\">\r\n            <Choice id={gameOneID} otherGameID={gameTwoID} name={gameOne} down={false} handleClick={handleClickChoice} />\r\n            <Choice id={gameOneID} otherGameID={gameTwoID} name=\"Unknown Game\" down={true} handleClick={handleClickChoice} />\r\n        </div>\r\n        <div style={{\"width\":\"100%\", \"display\":\"flex\"}}>\r\n            <button className=\"closeButton\" onClick={handleClose}> Close </button>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChoiceEvent;\r\n","import React from \"react\";\r\n\r\nimport Choice from \"./Choice\"\r\n\r\nconst FinalVote = ({ handleClose, show, children, gameOne, gameOneID, gameTwoID, gameTwo, handleClickChoice }) => {\r\n  const showHideClassName = show ? \"choiceCard display-block\" : \"choiceCard display-none\";\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n      <section className='choiceCard-main'>\r\n        <h2 style={{\"font-family\": \"Arial\", \"width\":\"100%\", \"text-align\": \"center\"}}>All player vote on which game should win</h2>\r\n          <div className=\"choiceGrid\">\r\n            <Choice id={gameOneID} otherGameID={gameTwoID} name={gameOne} down={false} handleClick={handleClickChoice} />\r\n            <Choice id={gameTwoID} otherGameID={gameOneID} name={gameTwo} down={true} handleClick={handleClickChoice} />\r\n          </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinalVote;\r\n","import React from \"react\"\r\n\r\nfunction Card(props){\r\n    return(\r\n        <div className='cardContainer'>\r\n            <button className=\"card\" onClick={() => props.handleClick(props.name, props.id)}>\r\n                <h1>{props.name}</h1>\r\n            </button>\r\n            <div className='cardOutline'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from \"react\";\r\n\r\nconst WinScreen = ({ handleClose, show, children, name }) => {\r\n  const showHideClassName = show ? \"choiceCard display-block\" : \"choiceCard display-none\";\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n      <section className='choiceCard-main'>\r\n        <h2 style={{\"font-family\": \"Arial\", \"width\":\"100%\", \"text-align\": \"center\"}}>The winner is</h2>\r\n        <h1 style={{\"font-family\": \"Arial\", \"width\":\"100%\", \"text-align\": \"center\", \"font-size\": \"40px\"}}>{name}</h1>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WinScreen;\r\n","import React from \"react\";\r\n\r\nimport Choice from \"./Choice\"\r\n\r\nconst SaveScreen = ({ handleClose, show, children, saveLeft, handleClickChoice }) => {\r\n  const showHideClassName = show ? \"saveCard display-block\" : \"saveCard display-none\";\r\n  let choiceCards = []\r\n  choiceCards = saveLeft.map(game => {\r\n      return(<Choice name={game} handleClick={handleClickChoice}/>)\r\n  })\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n      <section className='saveCard-main'>\r\n        <h2 style={{\"font-family\": \"Arial\", \"width\":\"100%\", \"text-align\": \"center\"}}>Who is saving the last game killed?</h2>\r\n          <div className=\"saveGrid\">\r\n            {choiceCards}\r\n          </div>\r\n          <div style={{\"width\":\"100%\", \"display\":\"flex\"}}>\r\n              <button className=\"closeButton\" onClick={handleClose}> Close </button>\r\n          </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SaveScreen;\r\n","import React from \"react\"\r\n\r\nimport ChoiceEvent from \"./ChoiceEvent\"\r\nimport FinalVote from \"./FinalVote\"\r\nimport Card from \"./Card\"\r\nimport gameData from \"../gameData\"\r\nimport WinScreen from \"./Winning.js\"\r\nimport SaveScreen from \"./Save\"\r\n\r\nclass GameController extends React.Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.constructDeck()\r\n        this.constructPlayers()\r\n    }\r\n\r\n    state = { show: false,\r\n        refresh: \"\",\r\n        gameOne: \"\",\r\n        gameOneID: \"\",\r\n        gameTwo: \"\",\r\n        gameTwoID: \"\",\r\n        lastGameSaved: \"\",\r\n        lastGameKilled: \"\",\r\n        lastGameKilledCard: \"\",\r\n        lastGameKilledSaved: false,\r\n        shuffle: false,\r\n        vote: false,\r\n        winShow: false,\r\n        saveShow: false,\r\n        winner: \"\",\r\n    }\r\n\r\n    upCards=[]\r\n    downCards=[]\r\n    list = []\r\n    playerOrder = []\r\n    playerNum = parseInt(window.$playerNum)\r\n    gameCards\r\n    playerIndex = 0\r\n    secondPlayerIndex = 1\r\n    saveLeft = []\r\n\r\n    showChoiceEvent = (gameName, gameID) => {\r\n      this.setState({ show: true, gameOne: gameName, gameOneID: gameID, gameTwoID: \"1\"});\r\n    }\r\n\r\n    hideChoiceEvent = () => {\r\n      this.setState({ show: false });\r\n    }\r\n\r\n    showFinalVote = (gameName, gameID, gameNameTwo, gameIDTwo) => {\r\n      this.setState({ vote: true, gameOne: gameName, gameOneID: gameID, gameTwoID: gameIDTwo, gameTwo: gameNameTwo});\r\n    }\r\n\r\n    hideFinalVote = (name) => {\r\n      this.setState({ vote: false, winShow: true, winner: name});\r\n    }\r\n\r\n    showSaveChoice = () => {\r\n      this.setState({ saveShow: true });\r\n    }\r\n\r\n    hideSaveChoice = () => {\r\n      this.setState({ saveShow: false});\r\n    }\r\n\r\n    constructDeck = () => {\r\n        let items = window.$itemList.split('\\n')\r\n        for (let index = 0; index < items.length; index++){\r\n            let temp = []\r\n            temp.push(items[index])\r\n            temp.push(index)\r\n            this.list.push(temp)\r\n        }\r\n        this.gameCards = this.list.map(game => {\r\n            return(<Card key={game[1]} id={game[1]} name={game[0]} handleClick={this.showChoiceEvent}/>)\r\n        })\r\n    }\r\n\r\n    constructPlayers = () => {\r\n        for (let index = 1; index < this.playerNum + 1; index++ ){\r\n            this.playerOrder.push(index)\r\n            this.saveLeft.push(index)\r\n        }\r\n    }\r\n\r\n    nextPlayerTurn = () => {\r\n        if(this.playerIndex == this.playerOrder.length - 2){\r\n            this.playerIndex = this.playerIndex + 1\r\n            this.secondPlayerIndex = 0\r\n        }\r\n        else if(this.playerIndex == this.playerOrder.length - 1){\r\n            this.playerIndex = 0\r\n            this.secondPlayerIndex = 1\r\n        }\r\n        else{\r\n            this.playerIndex = this.playerIndex + 1\r\n            this.secondPlayerIndex = this.secondPlayerIndex + 1\r\n        }\r\n\r\n        this.props.changePlayerTurn(this.playerOrder[this.playerIndex].toString() + \" > \" + this.playerOrder[this.secondPlayerIndex].toString())\r\n    }\r\n\r\n\r\n    shuffleNewDeck = () => {\r\n        for (let i = this.gameCards.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [this.gameCards[i], this.gameCards[j]] = [this.gameCards[j], this.gameCards[i]];\r\n        }\r\n\r\n        if(this.gameCards.length % 2 === 0 ){\r\n            const half = Math.ceil(this.gameCards.length / 2);\r\n            this.upCards = this.gameCards.splice(0, half)\r\n            this.downCards = this.gameCards.splice(-half)\r\n        }\r\n        else{\r\n            const half = Math.floor(this.gameCards.length / 2);\r\n            this.upCards = this.gameCards.splice(0, half)\r\n            this.downCards = this.gameCards.splice(-half)\r\n        }\r\n\r\n        this.gameCards = this.gameCards.map(game => {\r\n            return(game)\r\n        })\r\n        this.setState({ refresh: \"true\" });\r\n\r\n    }\r\n\r\n    removeGames = (gameOne, gameTwo, down) => {\r\n        if(down){\r\n            const gameSaved = this.downCards.splice(this.downCards.findIndex(p => p.key == gameTwo), 1)[0]\r\n            this.gameCards.push(gameSaved)\r\n\r\n            this.downCards = this.downCards.map(game => {\r\n                return(game)\r\n            })\r\n\r\n            this.gameCards = this.gameCards.map(game => {\r\n                return(game)\r\n            })\r\n\r\n            const gameKilled = this.upCards.splice(this.upCards.findIndex(p => p.key == gameOne), 1)[0]\r\n            this.props.changeKilledText(gameKilled.props.name)\r\n            this.props.changeSavedText(gameSaved.props.name)\r\n\r\n            this.setState({lastGameKilled: gameKilled.props.name, lastGameKilledCard: gameKilled, lastGameKilledSaved: false});\r\n            this.upCards = this.upCards.map(game => {\r\n                return(game)\r\n            })\r\n        }\r\n        else {\r\n            const gameSaved = this.upCards.splice(this.upCards.findIndex(p => p.key == gameOne), 1)[0]\r\n            this.gameCards.push(gameSaved)\r\n\r\n            this.upCards = this.upCards.map(game => {\r\n                return(game)\r\n            })\r\n\r\n            this.gameCards = this.gameCards.map(game => {\r\n                return(game)\r\n            })\r\n\r\n            const gameKilled =  this.downCards.splice(this.downCards.findIndex(p => p.key == gameTwo), 1)[0]\r\n            this.props.changeKilledText(gameKilled.props.name)\r\n            this.props.changeSavedText(gameSaved.props.name)\r\n            this.setState({lastGameKilled: gameKilled.props.name, lastGameKilledCard: gameKilled, lastGameKilledSaved: false});\r\n            this.downCards = this.downCards.map(game => {\r\n                return(game)\r\n            })\r\n        }\r\n        if(this.downCards.length === 0){\r\n            this.handleNewShuffle()\r\n        }\r\n        this.nextPlayerTurn()\r\n        this.hideChoiceEvent()\r\n    }\r\n\r\n    saveLastKill = (id) => {\r\n        if(!this.state.lastGameKilledSaved && this.state.lastGameKilledCard !== \"\"){\r\n            this.gameCards.push(this.state.lastGameKilledCard)\r\n            this.setState({lastGameKilledSaved: true})\r\n            this.saveLeft.splice(this.saveLeft.findIndex(p => p == id), 1)\r\n            this.props.changeKilledText(\"\")\r\n            this.props.changeSavedText(this.state.lastGameKilledCard.props.name)\r\n        }\r\n        console.log(this.gameCards)\r\n    }\r\n\r\n    handleNewShuffle = () =>{\r\n        if(this.gameCards.length <= 2){\r\n            this.props.changeRound(\"Final\")\r\n            this.finalVote(this.gameCards)\r\n        }\r\n        else{\r\n            this.props.changeRound(this.props.round + 1)\r\n            this.shuffleNewDeck()\r\n            this.nextPlayerTurn()\r\n            this.playerOrder.reverse()\r\n        }\r\n    }\r\n\r\n    useSave = (id) => {\r\n        this.saveLastKill(id)\r\n\r\n        this.hideSaveChoice()\r\n    }\r\n\r\n    finalVote = () =>{\r\n        this.showFinalVote(this.gameCards.[0].props.name, this.gameCards.[0].props.id, this.gameCards.[1].props.name, this.gameCards.[1].props.id)\r\n    }\r\n\r\n    showWinningCard = (winID) =>{\r\n        const name = this.gameCards[this.gameCards.findIndex(p => p.key == winID)].props.name\r\n        this.hideFinalVote(name)\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(\"I mounted\")\r\n        this.shuffleNewDeck()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='game'>\r\n                <button style={{\"width\":\"200px\"}} className=\"closeButton\" onClick={this.showSaveChoice}>Save last game</button>\r\n                <div className='gameCards'>\r\n                    {this.upCards}\r\n                </div>\r\n                <ChoiceEvent show={this.state.show} handleClose={this.hideChoiceEvent} gameOne={this.state.gameOne} gameOneID={this.state.gameOneID} handleClickChoice={this.removeGames}/>\r\n                <FinalVote show={this.state.vote} handleClose={this.hideFinalVote} gameOne={this.state.gameOne} gameOneID={this.state.gameOneID} gameTwo={this.state.gameTwo} gameTwoID={this.state.gameTwoID} handleClickChoice={this.showWinningCard}/>\r\n                <WinScreen show={this.state.winShow} name={this.state.winner}/>\r\n                <SaveScreen show={this.state.saveShow} handleClose={this.hideSaveChoice} saveLeft={this.saveLeft} handleClickChoice={this.useSave}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameController\r\n","import React, { useState } from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport App from \"./App\"\r\nimport './style.css'\r\nimport header from \"./header2.png\"\r\nimport GameController from \"./components/GameController\"\r\n\r\nfunction GameContainer(){\r\n\r\n    const [lastCardKilled, setLastCardKilled] = useState(\"\")\r\n    const [lastCardSaved, setLastCardSaved] = useState(\"\")\r\n    const [round, setRound] = useState(1)\r\n    const [playerTurn, setPlayerTurn] = useState(\"1 > 2\")\r\n\r\n    return(\r\n        <div className='appContainer'>\r\n            <div className='prev'>\r\n                <div className='round'>\r\n                    <h1 style={{\"text-align\": \"center\", \"margin\":\"10px 0 10px 0\"}}>Round<br /> {round}</h1>\r\n                </div>\r\n                <div className='playerTurn'>\r\n                    <h1 style={{\"text-align\": \"center\", \"margin\":\"10px 0 10px 0\"}}>Player's Turn<br /> {playerTurn}</h1>\r\n                </div>\r\n                <div className='killed'>\r\n                    <h1 style={{\"text-align\": \"center\"}}>Last game killed<br /> {lastCardKilled}</h1>\r\n                </div>\r\n                <div className='saved'>\r\n                    <h1 style={{\"text-align\": \"center\"}}>Last game saved<br /> {lastCardSaved}</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"app\">\r\n                <GameController changeKilledText={setLastCardKilled} changeSavedText={setLastCardSaved} changeRound={setRound} changePlayerTurn={setPlayerTurn} player={playerTurn} round={round}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GameContainer\r\n","import React, { useState } from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Data(){\r\n\r\n    const saveList = () =>{\r\n        window.$itemList = document.getElementById(\"itemsArea\").value\r\n        window.$playerNum = document.getElementById(\"playerArea\").value\r\n        console.log(window.$playerNum)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"dataDiv\">\r\n                <div className=\"inside\">\r\n                    <textarea id=\"itemsArea\" placeholder=\"Put items here...\"></textarea>\r\n                    <input type=\"number\" step=\"1\" placeholder=\"How many players?\" id=\"playerArea\" min=\"2\" max=\"20\"></input>\r\n                    <br/>\r\n                    <Link to=\"/game\">\r\n                        <button className=\"dataSubmit\" onClick={saveList}>Submit</button>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"inside2\">\r\n                    <h3 className=\"info\" style={{\"margin-top\":\"0px\"}}>To input a list of items, put each item on a single line without anything else. Each line will count as a item. Even a blank one.<br /><br />  It may include punctuation but they will be included in the view when playing the game. Here is an example on how to input the items:</h3>\r\n                    <p className=\"item\">The Legend of Zelda</p>\r\n                    <p className=\"item\">Super Mario Bros.</p>\r\n                    <p className=\"item\">Super Metroid</p>\r\n                    <p className=\"item\">Kirby Super Star</p>\r\n                    <p className=\"item\">Donkey Kong Country</p>\r\n                    <p className=\"item\">A Short Hike</p>\r\n                    <h3 className=\"info\">Once you have all the items you want to include, hit submit and the game will start</h3>\r\n                </div>\r\n            </div>\r\n            <div className=\"rulesDiv\">\r\n                <div className=\"rules\"><h1>Rules</h1></div>\r\n                <div className=\"rules\"><p>You will input a list. It can be anything, but is typically a list of you favorites things for a category. You will then input how many players there will be. Once you click Submit, the game will start.<br /><br />The list will be put into a \"deck\" and then the cards will split into pairs. One card will be shown or \"face up\" and the other card will not be shown or \"face down\".<br /><br />The way a turn works is one player will choose a pair for another player. The player whose didn't choose the pair will then get to decide whether they want to save the face up card or save the face down card. Which ever card they don't save will be killed. The game keeps going until there is only one card left. The final 2 cards will be taken to a vote by everyone. Each player gets to save one card that was killed but only immediately after it was killed.<br /><br />This game and rules were taken by Easy Allies and this video: https://www.youtube.com/watch?v=uB_pvw7FU6I. If you want a better explantion of the rules, watch the video.</p></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Data\r\n","import React, { useState } from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Link, Route, BrowserRouter, Switch } from 'react-router-dom';\r\n\r\nimport GameContainer from \"./GameContainer\"\r\nimport Data from \"./Data\"\r\nimport './style.css'\r\nimport header from \"./header2.png\"\r\n\r\nwindow.$itemList = ''\r\nwindow.$playerNum = ''\r\n\r\nfunction App(){\r\n\r\n    return(\r\n        <main>\r\n            <img src={header} className='header'></img>\r\n            <Switch>\r\n                <Route path='/LastOneStanding' component={Data} />\r\n                <Route path='/game' component={GameContainer} />\r\n            </Switch>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport App from \"./App\"\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}